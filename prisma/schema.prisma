// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model ScamServer {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  size      ScamServerSize
  invites   String[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  serverId  String         @unique
  isActive  Boolean        @default(true)
  // User ID
  // If blank, assume created by SYSTEM
  createdBy User?          @relation(fields: [id], references: [id])
}

model ReportedServer {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  invites   String[]
  size      ScamServerSize
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now())
  serverId  String         @unique
}

model PartneredServer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  invite      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  partnered   Boolean? @default(false)
  description String
  serverId    String
  image       String?
}

enum ScamServerSize {
  TINY
  SMALL
  MEDIUM
  LARGE
  OPERATION
}

enum UserPermissions {
  READ
  WRITE // Includes update privs
  // If the createdBy field is blank, assume created by SYSTEM
  // Only system can delete when created by SYSTEM
  DELETE // Remove other people's db submissions
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  ScamServer    ScamServer[]
  Account       Account[]
  Session       Session[]
  email         String?      @unique
  emailVerified DateTime?
  image         String?
}

// Next-Auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
